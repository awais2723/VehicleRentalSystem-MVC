@model VehicleRentalSystem.Models.Vehicle
@{
    ViewBag.Title = Model?.Id > 0 ? "Edit Vehicle" : "Add New Vehicle";
    var isEdit = Model != null && Model.Id > 0;
    var formAction = isEdit ? "EditVehicle" : "CreateVehicle";
}

<div class="container my-5">
    <h2 class="text-dark fw-bold mb-4">@ViewBag.Title</h2>

    <div class="view-card">
        @using (Html.BeginForm(formAction, "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)

            <div class="row g-4">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Name, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger mt-1" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Type, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Type, new { @class = "form-control", })
                        @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger mt-1" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.RatePerDay, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.RatePerDay, new { @class = "form-control", type = "number", step = "0.01",  })
                        @Html.ValidationMessageFor(m => m.RatePerDay, "", new { @class = "text-danger mt-1" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Vehicle Image", new { @class = "form-label" })
                        <input type="file" name="imageFile" id="imageFile" class="form-control" accept="image/*" />
                        @* Existing Image Preview for Edit Mode *@
                        @if (isEdit && !string.IsNullOrEmpty(Model.ImagePath))
                        {
                            <small class="form-text text-muted mt-2 d-block">Current Image:</small>
                            <div class="mt-2">
                                <img id="currentImagePreview" src="@Model.ImagePath" alt="Current Vehicle Image" class="img-thumbnail" style="max-width: 200px; height: auto;" />
                            </div>
                        }
                        <div id="newImagePreviewContainer" class="mt-3" style="display: none;">
                            <small class="form-text text-muted d-block">New Image Preview:</small>
                            <img id="newImagePreview" src="#" alt="Image Preview" class="img-thumbnail" style="max-width: 200px; height: auto;" />
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Model, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Model, new { @class = "form-control",  })
                        @Html.ValidationMessageFor(m => m.Model, "", new { @class = "text-danger mt-1" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.EngineCapacity, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.EngineCapacity, new { @class = "form-control",  })
                        @Html.ValidationMessageFor(m => m.EngineCapacity, "", new { @class = "text-danger mt-1" })
                    </div>
                </div>
            </div>

            <div class="mt-4 d-flex gap-3">
                <button type="submit" class="btn btn-primary d-inline-flex align-items-center">
                    @if (isEdit)
                    {
                        @:<i class="bi bi-save me-2"></i> Save Changes @* Corrected line: Added @: prefix *@
                    }
                    else
                    {
                        @:<i class="bi bi-plus-circle me-2"></i> Add Vehicle @* Corrected line: Added @: prefix *@
                    }
                </button>
                <a href="@Url.Action("Vehicles", "Admin")" class="btn btn-secondary d-inline-flex align-items-center">
                    <i class="bi bi-arrow-left me-2"></i> Back to Vehicles
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const imageFile = document.getElementById('imageFile');
            const newImagePreview = document.getElementById('newImagePreview');
            const newImagePreviewContainer = document.getElementById('newImagePreviewContainer');
            const currentImagePreview = document.getElementById('currentImagePreview');

            imageFile.addEventListener('change', function (event) {
                if (event.target.files && event.target.files[0]) {
                    const reader = new FileReader();

                    reader.onload = function (e) {
                        newImagePreview.src = e.target.result;
                        newImagePreviewContainer.style.display = 'block';

                        // Hide current image preview if a new image is selected in edit mode
                        if (currentImagePreview) {
                            currentImagePreview.style.display = 'none';
                            // Also hide its small text if you want
                            const currentImageText = currentImagePreview.previousElementSibling;
                            if (currentImageText && currentImageText.classList.contains('form-text')) {
                                currentImageText.style.display = 'none';
                            }
                        }
                    };
                    reader.readAsDataURL(event.target.files[0]);
                } else {
                    newImagePreviewContainer.style.display = 'none';
                    newImagePreview.src = '#'; // Clear the source

                    // Show current image preview if no new image is selected in edit mode
                    if (currentImagePreview) {
                        currentImagePreview.style.display = 'block';
                        const currentImageText = currentImagePreview.previousElementSibling;
                        if (currentImageText && currentImageText.classList.contains('form-text')) {
                            currentImageText.style.display = 'block';
                        }
                    }
                }
            });
        });
    </script>
}